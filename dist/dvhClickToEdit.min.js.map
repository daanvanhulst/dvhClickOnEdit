{"version":3,"sources":["dvhClickToEdit.ts","dvhClickToEdit.js","dvhRichTextAreaEdit/dvhRichTextAreaEdit.ts","dvhTextAreaEdit/dvhTextAreaEdit.ts","dvhTextEdit/dvhTextEdit.ts","editableDirectiveFactory/editableDirectiveFactory.ts"],"names":["ClickToEdit","ClickToEdit.ClickToEditElement","ClickToEdit.ClickToEditElement.constructor","scope","errorMessage","angular","isFunction","clickToEditConfig","onSave","promise","model","setUpdatedModel","resolvingData","then","error","value","originalValue","editMode","ClickToEdit.ClickToEditElement.Factory","ClickToEdit.ClickToEditElement.destruct","ClickToEdit.TextAreaEdit","ClickToEdit.TextAreaEdit.constructor","ClickToEdit.TextAreaEdit.Factory","ClickToEdit.TextAreaEdit.destruct","ClickToEdit.RichTextAreaEdit","ClickToEdit.RichTextAreaEdit.constructor","ClickToEdit.RichTextAreaEdit.Factory","ClickToEdit.RichTextAreaEdit.destruct","ClickToEdit.TextEdit","ClickToEdit.TextEdit.constructor","ClickToEdit.TextEdit.Factory","ClickToEdit.TextEdit.destruct","ClickToEditFactories","ClickToEditFactories.EditableDirectiveFactory","ClickToEditFactories.EditableDirectiveFactory.createEditableDirective"],"mappings":"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","file":"dvhClickToEdit.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name ClickToEdit\r\n */\r\nmodule ClickToEdit {\r\n\r\n    interface IClickToEditOnSaveParam {\r\n        model: IClickToEditModel;\r\n    }\r\n\r\n    interface IClickToEditModel {\r\n        value: string;\r\n    }\r\n\r\n    interface IClickToEditConfig {\r\n        fieldType: string;\r\n        model: IClickToEditModel;\r\n        onSave: ( modelParam: IClickToEditOnSaveParam ) => ng.IPromise<void>;\r\n    }\r\n\r\n    export interface IClickToEditScope extends ng.IScope {\r\n        clickToEditConfig: IClickToEditConfig;\r\n        model: IClickToEditModel;\r\n        fieldType: string;\r\n        onSave: (  modelParam: IClickToEditOnSaveParam ) => ng.IPromise<void>;\r\n        setUpdatedModel(model: IClickToEditModel);\r\n\r\n\t\teditMode: boolean;\r\n        resolvingData: boolean;\r\n        errorMessage: string;\r\n        originalValue: string;\r\n        saveModel: (  model: IClickToEditModel ) => void;\r\n        discardValue: () => void;\r\n    }\r\n\r\n    export class ClickToEditElement {\r\n        // #region Angular directive properties, fields, and methods\r\n        public link: {\r\n            pre: ( scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes ) => void;\r\n            post: ( scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes ) => void;\r\n        };\r\n        public scope = {\r\n            clickToEditConfig: \"=?\",\r\n            fieldType: \"@?\",\r\n            model: \"=?\",\r\n            onSave: \"&?\"\r\n        };\r\n        // #endregion\r\n\r\n        // #region Initialization and destruction\r\n        constructor(editableDirectiveFactory, $compile) {\r\n\r\n            this._$compile = $compile;\r\n            this._editableDirectiveFactory = editableDirectiveFactory;\r\n\r\n            ClickToEditElement.prototype.link = {\r\n                pre: ( scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes ) => {\r\n\r\n                    if (angular.isUndefined(scope.clickToEditConfig)) {\r\n                        scope.clickToEditConfig = { model: {value: \"\"}, fieldType: \"text\", onSave: null };\r\n                    }\r\n\r\n                    if ( angular.isDefined(scope.model) && angular.isDefined(scope.model.value) ) {\r\n                        scope.clickToEditConfig.model = scope.model;\r\n                    }\r\n                    if ( angular.isDefined(scope.fieldType) ) { scope.clickToEditConfig.fieldType = scope.fieldType; }\r\n                    if ( angular.isDefined(scope.onSave) )    {  scope.clickToEditConfig.onSave = scope.onSave; }\r\n\r\n                    scope.originalValue = scope.clickToEditConfig.model.value;\r\n\r\n                    scope.editMode = false;\r\n                },\r\n                post: ( scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes ) => {\r\n                    scope.saveModel = function( model: IClickToEditModel) {\r\n                        scope.errorMessage = \"\";\r\n\r\n                        if (angular.isFunction(scope.clickToEditConfig.onSave)) {\r\n\r\n                            var promise = scope.clickToEditConfig.onSave({model: model});\r\n\r\n                            if (!promise) {\r\n                                scope.setUpdatedModel(model);\r\n                                return;\r\n                            }\r\n\r\n                            scope.resolvingData = true;\r\n                            promise.then(\r\n                                function() {\r\n                                    scope.setUpdatedModel(model);\r\n                                },\r\n                                function(error) {\r\n                                    if (error) {\r\n                                        scope.errorMessage = error;\r\n                                    } else {\r\n                                        scope.errorMessage = \"error in application when saving\";\r\n                                    }\r\n                                })\r\n                                .finally(function(){\r\n                                    scope.resolvingData = false;\r\n                                });\r\n                        }\r\n                    };\r\n\r\n                    scope.discardValue = function() {\r\n                        scope.errorMessage = \"\";\r\n                        scope.clickToEditConfig.model.value = scope.originalValue;\r\n                        scope.model.value = scope.originalValue;\r\n                        scope.editMode = false;\r\n                    };\r\n\r\n                    // Create the editable element\r\n                    var editableElement = editableDirectiveFactory.createEditableDirective(scope.clickToEditConfig.fieldType);\r\n\r\n                    //Compile the editable element\r\n                    var e = $compile(editableElement)(scope);\r\n\r\n                    //Replace the current element with the editable element\r\n                    element.replaceWith(e);\r\n\r\n                    scope.setUpdatedModel = function(model) {\r\n                        scope.originalValue = model.value;\r\n                        scope.clickToEditConfig.model = model;\r\n                        scope.model = model;\r\n                        scope.editMode = false;\r\n                    };\r\n\r\n                    scope.$on(\"$destroy\", this.destruct);\r\n\r\n                    this._scope = scope;\r\n                }\r\n            };\r\n        }\r\n\r\n        public static Factory() {\r\n            var directive = (editableDirectiveFactory, $compile) => {\r\n                return new ClickToEditElement(editableDirectiveFactory, $compile);\r\n            };\r\n\r\n            directive[\"$inject\"] = [\"editableDirectiveFactory\", \"$compile\"];\r\n\r\n            return directive;\r\n        }\r\n\r\n        private destruct() {\r\n            this._$compile                    = null;\r\n            this._editableDirectiveFactory    = null;\r\n            this._scope                       = null;\r\n        }\r\n        // #endregion\r\n\r\n        // #region Private class properties, fields, and methods\r\n        private _editableDirectiveFactory    : any;\r\n        private _$compile                    : ng.ICompileService;\r\n        private _scope                       : IClickToEditScope;\r\n        // #endregion\r\n    }\r\n\r\n    angular.module(\"dvhClickToEdit\", [\r\n        \"dvhClickToEdit.editableDirectiveFactory\",\r\n        \"dvhClickToEdit.dvhTextEdit\",\r\n        \"dvhClickToEdit.dvhTextAreaEdit\",\r\n        \"dvhClickToEdit.dvhRichTextAreaEdit\"\r\n    ])\r\n    .directive(\"dvhClickToEdit\", ClickToEditElement.Factory());\r\n}\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\n/**\n * @ngdoc overview\n * @name ClickToEdit\n */\nvar ClickToEdit;\n(function (ClickToEdit) {\n    var ClickToEditElement = (function () {\n        // #endregion\n        // #region Initialization and destruction\n        function ClickToEditElement(editableDirectiveFactory, $compile) {\n            var _this = this;\n            this.scope = {\n                clickToEditConfig: \"=?\",\n                fieldType: \"@?\",\n                model: \"=?\",\n                onSave: \"&?\"\n            };\n            this._$compile = $compile;\n            this._editableDirectiveFactory = editableDirectiveFactory;\n            ClickToEditElement.prototype.link = {\n                pre: function (scope, element, attrs) {\n                    if (angular.isUndefined(scope.clickToEditConfig)) {\n                        scope.clickToEditConfig = { model: { value: \"\" }, fieldType: \"text\", onSave: null };\n                    }\n                    if (angular.isDefined(scope.model) && angular.isDefined(scope.model.value)) {\n                        scope.clickToEditConfig.model = scope.model;\n                    }\n                    if (angular.isDefined(scope.fieldType)) {\n                        scope.clickToEditConfig.fieldType = scope.fieldType;\n                    }\n                    if (angular.isDefined(scope.onSave)) {\n                        scope.clickToEditConfig.onSave = scope.onSave;\n                    }\n                    scope.originalValue = scope.clickToEditConfig.model.value;\n                    scope.editMode = false;\n                },\n                post: function (scope, element, attrs) {\n                    scope.saveModel = function (model) {\n                        scope.errorMessage = \"\";\n                        if (angular.isFunction(scope.clickToEditConfig.onSave)) {\n                            var promise = scope.clickToEditConfig.onSave({ model: model });\n                            if (!promise) {\n                                scope.setUpdatedModel(model);\n                                return;\n                            }\n                            scope.resolvingData = true;\n                            promise.then(function () {\n                                scope.setUpdatedModel(model);\n                            }, function (error) {\n                                if (error) {\n                                    scope.errorMessage = error;\n                                }\n                                else {\n                                    scope.errorMessage = \"error in application when saving\";\n                                }\n                            })\n                                .finally(function () {\n                                scope.resolvingData = false;\n                            });\n                        }\n                    };\n                    scope.discardValue = function () {\n                        scope.errorMessage = \"\";\n                        scope.clickToEditConfig.model.value = scope.originalValue;\n                        scope.model.value = scope.originalValue;\n                        scope.editMode = false;\n                    };\n                    // Create the editable element\n                    var editableElement = editableDirectiveFactory.createEditableDirective(scope.clickToEditConfig.fieldType);\n                    //Compile the editable element\n                    var e = $compile(editableElement)(scope);\n                    //Replace the current element with the editable element\n                    element.replaceWith(e);\n                    scope.setUpdatedModel = function (model) {\n                        scope.originalValue = model.value;\n                        scope.clickToEditConfig.model = model;\n                        scope.model = model;\n                        scope.editMode = false;\n                    };\n                    scope.$on(\"$destroy\", _this.destruct);\n                    _this._scope = scope;\n                }\n            };\n        }\n        ClickToEditElement.Factory = function () {\n            var directive = function (editableDirectiveFactory, $compile) {\n                return new ClickToEditElement(editableDirectiveFactory, $compile);\n            };\n            directive[\"$inject\"] = [\"editableDirectiveFactory\", \"$compile\"];\n            return directive;\n        };\n        ClickToEditElement.prototype.destruct = function () {\n            this._$compile = null;\n            this._editableDirectiveFactory = null;\n            this._scope = null;\n        };\n        return ClickToEditElement;\n    })();\n    ClickToEdit.ClickToEditElement = ClickToEditElement;\n    angular.module(\"dvhClickToEdit\", [\n        \"dvhClickToEdit.editableDirectiveFactory\",\n        \"dvhClickToEdit.dvhTextEdit\",\n        \"dvhClickToEdit.dvhTextAreaEdit\",\n        \"dvhClickToEdit.dvhRichTextAreaEdit\"\n    ])\n        .directive(\"dvhClickToEdit\", ClickToEditElement.Factory());\n})(ClickToEdit || (ClickToEdit = {}));\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n/// <reference path=\"../dvhClickToEdit.ts\" />\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name ClickToEdit\r\n */\r\nmodule ClickToEdit {\r\n\r\n    export class TextAreaEdit {\r\n        // #region Angular directive properties, fields, and methods\r\n        public link: (scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => void;\r\n        public scope = false;\r\n        public templateUrl = \"dvhClickToEdit/dvhTextAreaEdit/dvhTextAreaEdit.html\";\r\n        // #endregion\r\n\r\n        // #region Initialization and destruction\r\n        constructor() {\r\n            TextAreaEdit.prototype.link = (scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n                scope.$on(\"$destroy\", this.destruct);\r\n            };\r\n        }\r\n\r\n        public static Factory() {\r\n            var directive = () => {\r\n                return new TextAreaEdit();\r\n            };\r\n\r\n            directive[\"$inject\"] = [];\r\n\r\n            return directive;\r\n        }\r\n\r\n        private destruct() {\r\n            console.log(\"destroying\");\r\n        }\r\n        // #endregion\r\n    }\r\n\r\n    angular.module(\"dvhClickToEdit.dvhTextAreaEdit\", [\"textAngular\"])\r\n        .directive(\"dvhTextAreaEdit\", TextAreaEdit.Factory());\r\n}\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n/// <reference path=\"../dvhClickToEdit.ts\" />\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name ClickToEdit\r\n */\r\nmodule ClickToEdit {\r\n\r\n    export class RichTextAreaEdit {\r\n        // #region Angular directive properties, fields, and methods\r\n        public link: (scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => void;\r\n        public scope = false;\r\n        public templateUrl = \"dvhClickToEdit/dvhRichTextAreaEdit/dvhRichTextAreaEdit.html\";\r\n        // #endregion\r\n\r\n        // #region Initialization and destruction\r\n        constructor() {\r\n            RichTextAreaEdit.prototype.link = (scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n                scope.$on(\"$destroy\", this.destruct);\r\n            };\r\n        }\r\n\r\n        public static Factory() {\r\n            var directive = () => {\r\n                return new RichTextAreaEdit();\r\n            };\r\n\r\n            directive[\"$inject\"] = [];\r\n\r\n            return directive;\r\n        }\r\n\r\n        private destruct() {\r\n            console.log(\"destroying\");\r\n        }\r\n        // #endregion\r\n    }\r\n\r\n    angular.module(\"dvhClickToEdit.dvhRichTextAreaEdit\", [\"textAngular\"])\r\n        .directive(\"dvhRichTextAreaEdit\", RichTextAreaEdit.Factory());\r\n}\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n/// <reference path=\"../dvhClickToEdit.ts\" />\r\n\r\n/**\r\n * @ngdoc overview\r\n * @name ClickToEdit\r\n */\r\nmodule ClickToEdit {\r\n\r\n    export class TextEdit {\r\n        // #region Angular directive properties, fields, and methods\r\n        public link: (scope: IClickToEditScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => void;\r\n        public templateUrl = \"dvhClickToEdit/dvhTextEdit/dvhTextEdit.html\";\r\n        // #endregion\r\n\r\n        // #region Initialization and destruction\r\n        constructor() {\r\n            TextEdit.prototype.link = (scope: IClickToEditScope,\r\n                                       element: ng.IAugmentedJQuery,\r\n                                       attrs: ng.IAttributes) => {\r\n                scope.$on(\"$destroy\", this.destruct);\r\n            };\r\n        }\r\n\r\n        public static Factory() {\r\n            var directive = () => {\r\n                return new TextEdit();\r\n            };\r\n\r\n            directive[\"$inject\"] = [];\r\n\r\n            return directive;\r\n        }\r\n\r\n        private destruct() {\r\n            console.log(\"destroying\");\r\n        }\r\n        // #endregion\r\n    }\r\n\r\n    angular.module(\"dvhClickToEdit.dvhTextEdit\", [])\r\n        .directive(\"dvhTextEdit\", TextEdit.Factory());\r\n}\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule ClickToEditFactories {\r\n    class EditableDirectiveFactory {\r\n\r\n        public createEditableDirective(type): String {\r\n            var element = \"\";\r\n            switch (type) {\r\n                case \"textArea\":\r\n                    element = \"<span dvh-text-area-edit></span>\";\r\n                    break;\r\n                case \"richTextArea\":\r\n                    element = \"<span dvh-rich-text-area-edit></span>\";\r\n                    break;\r\n                case \"text\":\r\n                default:\r\n                    element = \"<span dvh-text-edit></span>\";\r\n                    break;\r\n\r\n            }\r\n            return element;\r\n        }\r\n    }\r\n\r\n    angular.module(\"dvhClickToEdit.editableDirectiveFactory\", []).factory(\"editableDirectiveFactory\", () => {\r\n        return new EditableDirectiveFactory();\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}